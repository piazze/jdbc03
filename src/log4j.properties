### 设置日志输出级别 ###
log4j.rootLogger = INFO,stdout,D,E

### 输出到控制台 ###
### 配置日志信息输出目的地 Appender
### 定义的日志输出方式
### org.apache.log4j.ConsoleAppender 控制台输出
### org.apache.log4j.FileAppender（文件）
### org.apache.log4j.DailyRollingFileAppender （每天产生一个日志文件）
### org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
# 可通过log4j.appender.R.MaxFileSize=100KB设置文件大小，
# 还可通过log4j.appender.R.MaxBackupIndex=1设置为保存一个备份文件。
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
### 配置日志信息的格式（布局）Layout
#Log4j提供的layout有以下几种
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
###Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下：
#%m 输出代码中指定的消息；
#%M 输出打印该条日志的方法名；
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；
#%r 输出自应用启动到输出该log信息耗费的毫秒数；
#%c 输出所属的类目，通常就是所在类的全名；
#%t 输出产生该日志事件的线程名；
#%n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；
#%l 输出日志事件的发生位置，及在代码中的行数。
log4j.appender.stdout.layout.ConversionPattern =  %d{ABSOLUTE} %5p %c{1}:%L - %m%n

### 输出到日志文件 ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
###设置日志文件的路径
log4j.appender.D.File = com.wisezone.logs/warn.log
log4j.appender.D.Append = true
## 输出WARN级别以上的日志
log4j.appender.D.Threshold = WARN 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 保存异常信息到单独文件 ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
## 异常日志文件名
log4j.appender.E.File = com.wisezone.logs/error.log 
log4j.appender.E.Append = true
## 只输出ERROR级别以上的日志!!!
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n